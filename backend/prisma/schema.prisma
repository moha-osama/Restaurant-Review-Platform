// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    String[] @default([])
  role      String   @default("user") //"user", "admin", "owner"

  restaurants Restaurant[]
  reviews      Review[]
  votes        ReviewVote[]
}

model Restaurant {
  id            String      @id @default(cuid())
  owner_id      String   
  name          String   @db.VarChar(200)
  location      String?  @db.VarChar(200)
  description   String?  @db.Text
  avg_rating    Decimal  @default(0.0) @db.Decimal(3, 2)
  avg_sentiment Decimal  @default(0.0) @db.Decimal(3, 2)
  created_at    DateTime @default(now())
  
  owner User @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  reviews Review[]
}

model Review {
  id            String   @id @default(cuid())
  restaurant_id String
  user_id       String
  rating        Decimal  @db.Decimal(3, 2)
  sentiment     Float
  comment       String?  @db.Text
  created_at    DateTime @default(now())

  restaurant Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  votes      ReviewVote[]
}

model ReviewVote {
  id String @id @default(cuid())
  review_id String
  user_id String
  value Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  review Review @relation(fields: [review_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([review_id, user_id])
}

model Events {
  id               String   @id @default(cuid())
  event_name       String
  user_id          String
  timestamp        DateTime @default(now())
  event_properties Json
  experiment_id    String?   // optional
  variant_id       String?   // optional
  device_type      String
  platform         String
  session_id       String
  experiment       Experiment? @relation(fields: [experiment_id], references: [id])
  variant          Variant?    @relation(fields: [variant_id], references: [id])
}

model Assignment {
  id          String   @id @default(cuid())
  user_id     String
  experiment_id String
  variant_id   String
  experiment  Experiment @relation(fields: [experiment_id], references: [id])
  variant     Variant    @relation(fields: [variant_id], references: [id])
}

model Variant {
  id            String      @id @default(cuid())
  name          String      // "A", "B", "C"
  description   String?
  experiment_id String
  experiment    Experiment  @relation(fields: [experiment_id], references: [id])
  assignments   Assignment[]
  events        Events[]
}

model Experiment {
  id          String    @id @default(cuid())
  name        String
  description String?
  start_date  DateTime
  end_date    DateTime?
  variants    Variant[]
  assignments Assignment[]
  events      Events[]
}